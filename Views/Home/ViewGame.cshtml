@model ScoreStore.Models.Scores

<div>
    <h4>@ViewBag.Title</h4>
    <img src="@ViewBag.ImageURL" alt="@ViewBag.Title Cover" width="120" height="96">
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Wins)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Wins)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Losses)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Losses)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.UserId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.UserId)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.GameId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.GameId)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.StreakList)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.StreakList)
        </dd>
    </dl>
</div>

<div class="grid-container">
    <div class="grid-item" id="donut_chart"></div>
    <div class="grid-item" id="column_chart"></div>
    <div class="grid-item" id="area_chart"></div>
    <div class="grid-item">todo</div>
</div>

<div>
    <!--<a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |-->
    <a asp-action="AddScore" asp-route-id="@Model.GameId">Add Score</a> |
    <a asp-action="GameList">Back to List</a>
</div>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: auto auto;
        background-color: #2196F3;
        padding: 10px;
    }

    .grid-item {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.8);
        padding: 20px;
        font-size: 30px;
        text-align: center;
        width: 100%;
        height: 100%;
    }
</style>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">

    // load charts and package
    google.charts.load('current', { 'packages': ['corechart'] });

    // draw win/loss donut chart
    google.charts.setOnLoadCallback(drawDonutChart);

    // draw win totals column chart
    google.charts.setOnLoadCallback(drawColumnChart);

    // draw win streak area chart
    google.charts.setOnLoadCallback(drawAreaChart);

    // render the win loss ratio donut chart
    function drawDonutChart() {

        // initialize data table with user's wins and losses from model
        var data = google.visualization.arrayToDataTable([
          ['Result', 'Count'],
          ['Wins',     @Model.Wins],
          ['Losses',     @Model.Losses],
        ]);

        // set options for this chart
        var options = {
          pieHole: 0.5,
          pieSliceTextStyle: {
            color: 'black',
          },
            legend: 'none',
            width: 400,
            height: 300,
        };

        // instantiate and draw the chart
        var chart = new google.visualization.PieChart(document.getElementById('donut_chart'));
        chart.draw(data, options);
    }

    // render the win totals column chart
    function drawColumnChart() {

        // initialize empty data table with columns for users and their win counts
        var data = new google.visualization.DataTable();
            data.addColumn('string', 'User');
            data.addColumn('number', 'Wins');

        // retrieve win list from view data
        // has format: { UserId = ..., Wins = ... }_{UserId = ..., Wins = ...}_{etc...}
        var input = "@ViewData["columns"]";

        // add row to data table for each element in the split input
        input.split('_').forEach(function (s) {

            // parse current string by removing unnecessary characters, ex:
            //  given input: '{ UserId = test_user, Wins = 123 }'
            //  when parsed: 'test_user,123'
            var parsed = s.replace("{ UserId = ", "");
            parsed = parsed.replace(" Wins = ", "");
            parsed = parsed.replace(" }", "");

            // extract user id and win totals from parsed string
            var delimIndex = parsed.indexOf(',');
            var user = parsed.substring(0, delimIndex);
            var wins = parsed.substring(delimIndex + 1, parsed.length);

            data.addRow([user, parseInt(wins)]);   // add parsed values to data table
        });

        // set options for this chart
        var options = {
            title: 'Win Totals',
            width: 400,
            height: 300,
            vAxis: {
                format: '#'
            }
        };

        // instantiate and draw the chart
        var chart = new google.visualization.ColumnChart(document.getElementById('column_chart'));
        chart.draw(data, options);
    }

    // render the win streak area chart
    function drawAreaChart() {

        // initialize empty data table
        var data = new google.visualization.DataTable();

        // retrieve streak list from model and remove trailing comma
        var input = ("@Model.StreakList").slice(0, -1);

        // split input into array of users in the list
        var streakList = input.split(',');

        // create array containing set of each user found in streak list
        let uniqueUsers = Array.from([...new Set(streakList)]);

        // add column to data table for match index and each unique user
        data.addColumn('number', 'Index');
        for (const user of uniqueUsers) {
            data.addColumn('number', user);
        }

        // create and zero-fill array with length of unique users plus one for match index
        // array format: [index, user1, user2, ..., userN]
        var rows = Array(uniqueUsers.length + 1).fill(0);

        data.addRow(rows);  // add default/empty score row to data table

        // iterate over each user that won in the streak list
        for (let i = 0; i < streakList.length; i++) {

            // iterate over each unique user found in streak list
            for (let j = 0; j < uniqueUsers.length; j++) {

                // check if index matches current streak list user
                if (streakList[i] == uniqueUsers[j]) {
                    rows[j + 1]++;      // increment score when users match
                    rows[0] = i + 1;    // increment index
                }
            }
            data.addRow(rows);  // add current score state to data table
        }

        // set options for this chart
        var options = {
            title: 'Win Streaks',
            width: 400,
            height: 300,
            hAxis: {
                title: 'Match History',
                titleTextStyle: {
                    color: '#333'
                },
                textPosition: 'none'
            },
            vAxis: {
                format: '#',
                minValue: 0
            }
        };

        // instantiate and draw the chart
        var chart = new google.visualization.AreaChart(document.getElementById('area_chart'));
        chart.draw(data, options);
    }
</script>